name: Deploy React App

on:
  push:
    branches: [ "dev", "prod" ]

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Check out the code
      - name: Check out repository
        uses: actions/checkout@v3

      # 2. Log in to Docker Hub
      - name: Log in to Docker Hub
        run: |
          echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      # 3. Build Docker image
      - name: Build Docker image
        run: |
          # Tag format: <username>/<repo>:<branch>-<short_sha>
          IMAGE_NAME="${{ secrets.DOCKERHUB_USERNAME }}/my-react-app"
          BRANCH_NAME="${{ github.ref_name }}" # e.g. 'main' or 'dev'
          SHORT_SHA="$(echo "${{ github.sha }}" | cut -c1-7)"
          
          docker build -t "$IMAGE_NAME:$BRANCH_NAME-$SHORT_SHA" .
          # Optionally tag 'latest' for the main branch
          if [ "${BRANCH_NAME}" = "main" ]; then
            docker tag "$IMAGE_NAME:$BRANCH_NAME-$SHORT_SHA" "$IMAGE_NAME:latest"
          fi

      # 4. Push Docker image to Docker Hub
      - name: Push Docker image
        run: |
          IMAGE_NAME="${{ secrets.DOCKERHUB_USERNAME }}/testrepo"
          BRANCH_NAME="${{ github.ref_name }}"
          SHORT_SHA="$(echo "${{ github.sha }}" | cut -c1-7)"

          docker push "$IMAGE_NAME:$BRANCH_NAME-$SHORT_SHA"

          # Optionally push 'latest' if on main
          if [ "${BRANCH_NAME}" = "main" ]; then
            docker push "$IMAGE_NAME:latest"
          fi

      # 5. (Optional) Configure AWS Credentials
      - name: Configure AWS Credentials
        if: always()
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # 6. (Optional) Deploy to AWS ECS (example command)
      - name: Deploy to ECS
        if: always()
        run: |
          # Example: force new deployment on an existing ECS service
          # Adjust cluster name, service name, region as needed
          aws ecs update-service \
            --cluster "${{ secrets.AWS_ECS_CLUSTER }}" \
            --service "${{ secrets.AWS_ECS_SERVICE }}" \
            --force-new-deployment
